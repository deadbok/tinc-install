---
- name: Set distribution specific variables
  include_vars: '{{ item }}'
  with_items:
    - default.yml
    - '{{ ansible_distribution }}.yml'

- name: Install tinc
  package:
    name: tinc
    state: latest
  become: yes
  when:
    - tinc_interfaces is defined
    - ansible_distribution != "FreeBSD"

- name: Install tinc (FreeBSD)
  package:
    name: tinc
    state: present
  become: yes
  when:
    - tinc_interfaces is defined
    - ansible_distribution == "FreeBSD"

- name: Install tinc ifconfig (Debian).
  package:
    name: net-tools
    state: latest
  become: yes
  when: ansible_distribution == "Debian"

- name: Ensure tinc network name directory exists.
  file:
    path: "{{ tinc_conf_dir }}/{{ tinc_interfaces[item].name }}/hosts"
    recurse: True
    state: directory
    owner: root
  become: yes
  with_items: "{{ tinc_interfaces }}"

- name: Set configured tinc networks to start at boot.
  template:
    src: nets.boot.j2
    dest: "{{ tinc_conf_dir }}/nets.boot"
  become: yes
  when: tinc_interfaces is defined

- name: Set configured tinc networks to start at boot (Gentoo).
  lineinfile:
    dest: "/etc/conf.d/tinc.networks"
    line: "NETWORK: {{ tinc_interfaces[item].name }}"
    create: yes
  become: yes
  when: "ansible_distribution == 'Gentoo' and tinc_interfaces[item].onboot"
  with_items: "{{ tinc_interfaces }}"

- name: Create network configurations.
  template:
    src: tinc.conf.j2
    dest: "{{ tinc_conf_dir }}/{{ tinc_interfaces[item].name }}/tinc.conf"
  become: yes
  with_items: "{{ tinc_interfaces }}"

- include: key.yml
  with_items: "{{ tinc_interfaces }}"

- name: Create tinc-down file
  template:
    src: tinc-down.j2
    dest: "{{ tinc_conf_dir }}/{{ tinc_interfaces[item].name }}/tinc-down"
    mode: 0755
  notify:
    - Restart tinc
  become: yes
  with_items: "{{ tinc_interfaces }}"

- name: Create tinc-up file
  template:
    src: tinc-up.j2
    dest: "{{ tinc_conf_dir }}/{{ tinc_interfaces[item].name }}/tinc-up"
    mode: 0755
  notify:
    - Restart tinc
  become: yes
  with_items: "{{ tinc_interfaces }}"

- name: Enable tinc at boot
  service:
    name: "{{ tinc_service }}"
    enabled: yes
  become: yes
  when: ansible_distribution != "FreeBSD"

- name: Enable tinc at boot (FreeBSD)
  shell: 'sysrc tincd_enable="YES"'
  become: yes
  when: ansible_distribution == "FreeBSD"

- name: Fetch tinc hosts file.
  fetch:
    src: "{{ tinc_conf_dir }}/{{ tinc_interfaces[item].name }}/hosts/{{ tinc_interfaces[item].hostname }}"
    dest: "fetch/tinc/{{ tinc_interfaces[item].name }}/hosts/{{ tinc_interfaces[item].hostname }}"
    flat: yes
  with_items: "{{ tinc_interfaces }}"

- name: Sync tinc hosts files to tmp
  synchronize:
    src: "fetch/tinc/{{ tinc_interfaces[item].name }}"
    dest: "/tmp/tinc/"
  with_items: "{{ tinc_interfaces }}"

- name: Sync tinc hosts files to tinc configuration directory
  synchronize:
    src: "/tmp/tinc/"
    dest: "{{ tinc_conf_dir }}/"
  become: yes
  notify:
  - Reload tinc
  delegate_to: "{{ inventory_hostname }}"
